diff --git a/CMakeLists.txt b/CMakeLists.txt
index 676192913..105ba1acf 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -209,11 +209,11 @@ else()
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W -Wextra -Wall")
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wsign-compare -Wshadow -Wno-unused-parameter -Wno-unused-variable -Woverloaded-virtual -Wnon-virtual-dtor -Wno-missing-field-initializers -Wno-strict-aliasing")
   if(MINGW)
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-format -fno-asynchronous-unwind-tables")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-format")
     add_definitions(-D_POSIX_C_SOURCE=1)
   endif()
   if(NOT CMAKE_BUILD_TYPE STREQUAL "Debug")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fomit-frame-pointer -O3")
     include(CheckCXXCompilerFlag)
     CHECK_CXX_COMPILER_FLAG("-momit-leaf-frame-pointer" HAVE_OMIT_LEAF_FRAME_POINTER)
     if(HAVE_OMIT_LEAF_FRAME_POINTER)
@@ -853,7 +853,7 @@ if(WIN32)
     port/win/env_default.cc
     port/win/port_win.cc
     port/win/win_logger.cc)
-  if(NOT MINGW)
+  if(NOT XX_MINGW)
     # Mingw only supports std::thread when using
     # posix threads.
     list(APPEND SOURCES
diff --git a/port/win/env_win.cc b/port/win/env_win.cc
index f7d8f9ce3..0125c773f 100644
--- a/port/win/env_win.cc
+++ b/port/win/env_win.cc
@@ -99,7 +99,7 @@ WinEnvIO::WinEnvIO(Env* hosted_env)
   HMODULE module = GetModuleHandle("kernel32.dll");
   if (module != NULL) {
     GetSystemTimePreciseAsFileTime_ =
-      (FnGetSystemTimePreciseAsFileTime)GetProcAddress(
+      (FnGetSystemTimePreciseAsFileTime)(void *)GetProcAddress(
           module, "GetSystemTimePreciseAsFileTime");
   }
 }
diff --git a/table/block_based/block_based_table_builder.cc b/table/block_based/block_based_table_builder.cc
index 28bfbb7b2..ba59ef094 100644
--- a/table/block_based/block_based_table_builder.cc
+++ b/table/block_based/block_based_table_builder.cc
@@ -1551,8 +1551,9 @@ void BlockBasedTableBuilder::EnterUnbuffered() {
     assert(!keys.empty());
 
     if (r->compression_opts.parallel_threads > 1) {
-      ParallelCompressionRep::BlockRep* block_rep;
+      ParallelCompressionRep::BlockRep* block_rep{};
       r->pc_rep->block_rep_pool.pop(block_rep);
+      assert(block_rep != nullptr);
 
       std::swap(*(block_rep->data), data_block);
       block_rep->contents = *(block_rep->data);
